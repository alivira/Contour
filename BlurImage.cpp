#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "iostream"
using namespace cv;
using namespace std;
int main(int argc, char** argv )
{
    Mat image;
    image = imread(argv[1], 1);  
    namedWindow( "Display window", CV_WINDOW_AUTOSIZE );  
    imshow( "Display window", image );
    Mat gray;
    cvtColor(image, gray, CV_BGR2GRAY);
    namedWindow( "Grayscale", CV_WINDOW_AUTOSIZE );  
    imshow( "Grayscale", gray );

    threshold(gray, gray, 244, 255, THRESH_BINARY);
    namedWindow( "Treshold", CV_WINDOW_AUTOSIZE );  
    imshow( "Treshold", gray );

    Canny(gray, gray, 100, 800, 3);
    namedWindow( "Canny", CV_WINDOW_AUTOSIZE );  
    imshow( "Canny", gray );

    /// Find contours   
    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;
    RNG rng(12345);
    findContours( gray, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_TC89_KCOS, Point(0, 0) );
    
    /// Draw contours
    Mat drawing = Mat::zeros( gray.size(), CV_8UC3 );
    for( int i = 0; i< contours.size(); i++ )
    {
        Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
        drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, Point() );
    }     
 
    namedWindow( "Result window", CV_WINDOW_AUTOSIZE );
    imshow( "Result window", drawing );


    waitKey(0);                                         
    return 0;
}


// //opencv
// #include "opencv2/imgcodecs.hpp"
// #include "opencv2/imgproc.hpp"
// #include "opencv2/videoio.hpp"
// #include <opencv2/highgui.hpp>
// #include <opencv2/video.hpp>
// //C
// #include <stdio.h>
// //C++
// #include <iostream>
// #include <sstream>
// using namespace cv;
// using namespace std;
// // Global variables
// Mat frame; //current frame
// Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
// Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
// int keyboard; //input from keyboard
// void help();
// void processVideo(char* videoFilename);
// void processImages(char* firstFrameFilename);
// void help()
// {
//     cout
//     << "--------------------------------------------------------------------------" << endl
//     << "This program shows how to use background subtraction methods provided by "  << endl
//     << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
//                                                                                     << endl
//     << "Usage:"                                                                     << endl
//     << "./bs {-vid <video filename>|-img <image filename>}"                         << endl
//     << "for example: ./bs -vid video.avi"                                           << endl
//     << "or: ./bs -img /data/images/1.png"                                           << endl
//     << "--------------------------------------------------------------------------" << endl
//     << endl;
// }
// int main(int argc, char* argv[])
// {
//     //print help information
//     help();
//     //check for the input parameter correctness
//     if(argc != 3) {
//         cerr <<"Incorret input list" << endl;
//         cerr <<"exiting..." << endl;
//         return EXIT_FAILURE;
//     }
//     //create GUI windows
//     namedWindow("Frame");
//     namedWindow("FG Mask MOG 2");
//     //create Background Subtractor objects
//     pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
//     if(strcmp(argv[1], "-vid") == 0) {
//         //input data coming from a video
//         processVideo(argv[2]);
//     }
//     else if(strcmp(argv[1], "-img") == 0) {
//         //input data coming from a sequence of images
//         processImages(argv[2]);
//     }
//     else {
//         //error in reading input parameters
//         cerr <<"Please, check the input parameters." << endl;
//         cerr <<"Exiting..." << endl;
//         return EXIT_FAILURE;
//     }
//     //destroy GUI windows
//     destroyAllWindows();
//     return EXIT_SUCCESS;
// }
// void processVideo(char* videoFilename) {
//     //create the capture object
//     VideoCapture capture(videoFilename);
//     if(!capture.isOpened()){
//         //error in opening the video input
//         cerr << "Unable to open video file: " << videoFilename << endl;
//         exit(EXIT_FAILURE);
//     }
//     //read input data. ESC or 'q' for quitting
//     while( (char)keyboard != 'q' && (char)keyboard != 27 ){
//         //read the current frame
//         if(!capture.read(frame)) {
//             cerr << "Unable to read next frame." << endl;
//             cerr << "Exiting..." << endl;
//             exit(EXIT_FAILURE);
//         }
//         //update the background model
//         pMOG2->apply(frame, fgMaskMOG2);
//         //get the frame number and write it on the current frame
//         stringstream ss;
//         rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
//                   cv::Scalar(255,255,255), -1);
//         ss << capture.get(CAP_PROP_POS_FRAMES);
//         string frameNumberString = ss.str();
//         putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
//                 FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
//         //show the current frame and the fg masks
//         imshow("Frame", frame);
//         imshow("FG Mask MOG 2", fgMaskMOG2);
//         //get the input from the keyboard
//         keyboard = waitKey( 30 );
//     }
//     //delete capture object
//     capture.release();
// }
// void processImages(char* fistFrameFilename) {
//     //read the first file of the sequence
//     frame = imread(fistFrameFilename);
//     if(frame.empty()){
//         //error in opening the first image
//         cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
//         exit(EXIT_FAILURE);
//     }
//     //current image filename
//     string fn(fistFrameFilename);
//     //read input data. ESC or 'q' for quitting
//     while( (char)keyboard != 'q' && (char)keyboard != 27 ){
//         //update the background model
//         pMOG2->apply(frame, fgMaskMOG2);
//         //get the frame number and write it on the current frame
//         size_t index = fn.find_last_of("/");
//         if(index == string::npos) {
//             index = fn.find_last_of("\\");
//         }
//         size_t index2 = fn.find_last_of(".");
//         string prefix = fn.substr(0,index+1);
//         string suffix = fn.substr(index2);
//         string frameNumberString = fn.substr(index+1, index2-index-1);
//         istringstream iss(frameNumberString);
//         int frameNumber = 0;
//         iss >> frameNumber;
//         rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
//                   cv::Scalar(255,255,255), -1);
//         putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
//                 FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
//         //show the current frame and the fg masks
//         imshow("Frame", frame);
//         imshow("FG Mask MOG 2", fgMaskMOG2);
//         //get the input from the keyboard
//         keyboard = waitKey( 30 );
//         //search for the next image in the sequence
//         ostringstream oss;
//         oss << (frameNumber + 1);
//         string nextFrameNumberString = oss.str();
//         string nextFrameFilename = prefix + nextFrameNumberString + suffix;
//         //read the next frame
//         frame = imread(nextFrameFilename);
//         if(frame.empty()){
//             //error in opening the next image in the sequence
//             cerr << "Unable to open image frame: " << nextFrameFilename << endl;
//             exit(EXIT_FAILURE);
//         }
//         //update the path of the current frame
//         fn.assign(nextFrameFilename);
//     string imageToSave = "output_MOG_" + frameNumberString + ".png";
//         bool saved = imwrite(imageToSave, fgMaskMOG2);
//         if(!saved) {
//              cerr << "Unable to save " << imageToSave << endl;
//         }
//     }
// }



/*#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"

#include <opencv2/opencv.hpp>
#include <iostream>
using namespace std;
using namespace cv;
int main(int, char** argv)
{
    // Load the image
    Mat src = imread(argv[1]);
    // Check if everything was fine
    if (!src.data)
        return -1;
    // Show source image
    imshow("Source Image", src);
    // Change the background from white to black, since that will help later to extract
    // better results during the use of Distance Transform
    for( int x = 0; x < src.rows; x++ ) {
      for( int y = 0; y < src.cols; y++ ) {
          if ( src.at<Vec3b>(x, y) == Vec3b(255,255,255) ) {
            src.at<Vec3b>(x, y)[0] = 0;
            src.at<Vec3b>(x, y)[1] = 0;
            src.at<Vec3b>(x, y)[2] = 0;
          }
        }
    }
    // Show output image
    imshow("Black Background Image", src);
    // Create a kernel that we will use for accuting/sharpening our image
    Mat kernel = (Mat_<float>(3,3) <<
            1,  1, 1,
            1, -8, 1,
            1,  1, 1); // an approximation of second derivative, a quite strong kernel
    // do the laplacian filtering as it is
    // well, we need to convert everything in something more deeper then CV_8U
    // because the kernel has some negative values,
    // and we can expect in general to have a Laplacian image with negative values
    // BUT a 8bits unsigned int (the one we are working with) can contain values from 0 to 255
    // so the possible negative number will be truncated
    Mat imgLaplacian;
    Mat sharp = src; // copy source image to another temporary one
    filter2D(sharp, imgLaplacian, CV_32F, kernel);
    src.convertTo(sharp, CV_32F);
    Mat imgResult = sharp - imgLaplacian;
    // convert back to 8bits gray scale
    imgResult.convertTo(imgResult, CV_8UC3);
    imgLaplacian.convertTo(imgLaplacian, CV_8UC3);
    // imshow( "Laplace Filtered Image", imgLaplacian );
    imshow( "New Sharped Image", imgResult );
    src = imgResult; // copy back
    // Create binary image from source image
    Mat bw;
    cvtColor(src, bw, CV_BGR2GRAY);
    threshold(bw, bw, 40, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);
    imshow("Binary Image", bw);
    // Perform the distance transform algorithm
    Mat dist;
    distanceTransform(bw, dist, CV_DIST_L2, 3);
    // Normalize the distance image for range = {0.0, 1.0}
    // so we can visualize and threshold it
    normalize(dist, dist, 0, 1., NORM_MINMAX);
    imshow("Distance Transform Image", dist);
    // Threshold to obtain the peaks
    // This will be the markers for the foreground objects
    threshold(dist, dist, .4, 1., CV_THRESH_BINARY);
    // Dilate a bit the dist image
    Mat kernel1 = Mat::ones(3, 3, CV_8UC1);
    dilate(dist, dist, kernel1);
    imshow("Peaks", dist);
    // Create the CV_8U version of the distance image
    // It is needed for findContours()
    Mat dist_8u;
    dist.convertTo(dist_8u, CV_8U);
    // Find total markers
    vector<vector<Point> > contours;
    findContours(dist_8u, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
    // Create the marker image for the watershed algorithm
    Mat markers = Mat::zeros(dist.size(), CV_32SC1);
    // Draw the foreground markers
    for (size_t i = 0; i < contours.size(); i++)
        drawContours(markers, contours, static_cast<int>(i), Scalar::all(static_cast<int>(i)+1), -1);
    // Draw the background marker
    circle(markers, Point(5,5), 3, CV_RGB(255,255,255), -1);
    imshow("Markers", markers*10000);
    // Perform the watershed algorithm
    watershed(src, markers);
    Mat mark = Mat::zeros(markers.size(), CV_8UC1);
    markers.convertTo(mark, CV_8UC1);
    bitwise_not(mark, mark);
//    imshow("Markers_v2", mark); // uncomment this if you want to see how the mark
                                  // image looks like at that point
    // Generate random colors
    vector<Vec3b> colors;
    for (size_t i = 0; i < contours.size(); i++)
    {
        int b = theRNG().uniform(0, 255);
        int g = theRNG().uniform(0, 255);
        int r = theRNG().uniform(0, 255);
        colors.push_back(Vec3b((uchar)b, (uchar)g, (uchar)r));
    }
    // Create the result image
    Mat dst = Mat::zeros(markers.size(), CV_8UC3);
    // Fill labeled objects with random colors
    for (int i = 0; i < markers.rows; i++)
    {
        for (int j = 0; j < markers.cols; j++)
        {
            int index = markers.at<int>(i,j);
            if (index > 0 && index <= static_cast<int>(contours.size()))
                dst.at<Vec3b>(i,j) = colors[index-1];
            else
                dst.at<Vec3b>(i,j) = Vec3b(0,0,0);
        }
    }
    // Visualize the final image
    vector<Vec4i> hierarchy;

    imshow("Final Result", dst);
    waitKey(0);
    return 0;
}



#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "iostream"
using namespace cv;
using namespace std;
int main( )
{
    Mat image;
    image = imread("webguy.png", 1);  
    namedWindow( "Display window", CV_WINDOW_AUTOSIZE );  
    imshow( "Display window", image );
    Mat gray;
    cvtColor(image, gray, CV_BGR2GRAY);
    namedWindow( "Grayscale", CV_WINDOW_AUTOSIZE );  
    imshow( "Grayscale", gray );

    // threshold(gray, gray, 0, 255, THRESH_BINARY);
    // namedWindow( "Treshold", CV_WINDOW_AUTOSIZE );  
    // imshow( "Treshold", gray );

    Canny(gray, gray, 100, 800, 3);
    namedWindow( "Canny", CV_WINDOW_AUTOSIZE );  
    imshow( "Canny", gray );

    /// Find contours   
    vector<vector<Point> > contours;
    vector<Vec4i> hierarchy;
    RNG rng(12345);
    findContours( gray, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_TC89_KCOS, Point(0, 0) );
    
    /// Draw contours
    Mat drawing = Mat::zeros( gray.size(), CV_8UC3 );
    for( int i = 0; i< contours.size(); i++ )
    {
        Scalar color = Scalar( rng.uniform(0, 255), rng.uniform(0,255), rng.uniform(0,255) );
        drawContours( drawing, contours, i, color, 2, 8, hierarchy, 0, Point() );
    }     
 
    namedWindow( "Result window", CV_WINDOW_AUTOSIZE );
    imshow( "Result window", drawing );


    waitKey(0);                                         
    return 0;
}
*/